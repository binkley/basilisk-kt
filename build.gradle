import java.nio.file.Files
import java.nio.file.Paths

import static java.nio.file.Files.createSymbolicLink

plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.3.41"
    id "org.jetbrains.kotlin.kapt" version "1.3.41"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.41"
    id "com.gorylenko.gradle-git-properties" version "2.0.0"
    id "com.pasam.gradle.buildinfo" version "0.1.3"
    id "com.github.ben-manes.versions" version "0.21.0"
    id "se.patrikerdes.use-latest-versions" version "0.2.11"
    id "build-dashboard"
    id "com.dorongold.task-tree" version "1.4"
    id "maven"
}

gradle.afterProject { project ->
    linkPrePush(project)
}

version = "0.1"
group = "hm.binkley"
mainClassName = "hm.binkley.basilisk.Application"

ext {
    atriumVersion = "0.8.0"
    exposedVersion = "0.16.1"
    handlebarsVersion = "4.1.2"
    jacksonVersion = "2.9.9"
    junit5Version = "5.5.0"
    kotlinVersion = "1.3.41"
    logbackVersion = "1.2.3"
    postgresVersion = "10.9"
    spekVersion = "1.2.1"
    testContainersVersion = "1.11.4"
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://dl.bintray.com/kotlin/exposed" }
    maven { url "https://jitpack.io" }
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:1.2.0.BUILD-SNAPSHOT"
    }
}

configurations {
    developmentOnly
}

dependencies {
    kapt "io.micronaut:micronaut-inject-java"

    kapt "io.micronaut:micronaut-validation"

    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut.configuration:micronaut-flyway"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-management"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
    runtime "ch.qos.logback:logback-classic:${logbackVersion}"
    kaptTest "io.micronaut:micronaut-inject-java"

    compile "io.micronaut.configuration:micronaut-jdbc-hikari"
    compile "com.github.JetBrains:Exposed:-SNAPSHOT"
//    compile "org.jetbrains.exposed:exposed:${exposedVersion}"
    compile "io.micronaut.configuration:micronaut-flyway"
    runtime "org.postgresql:postgresql:42.2.6"
    testCompile "org.testcontainers:junit-jupiter:${testContainersVersion}"
    testRuntime "org.testcontainers:postgresql:${testContainersVersion}"

    runtime "io.micronaut.configuration:micronaut-micrometer-core"

    kapt "io.micronaut.configuration:micronaut-openapi"
    compile "io.swagger.core.v3:swagger-annotations"
    compile "io.micronaut:micronaut-views"
    runtime "com.github.jknack:handlebars:${handlebarsVersion}"

    compile "io.micronaut:micronaut-tracing"
    compile "io.opentracing.brave:brave-opentracing"

    testCompile "io.micronaut.test:micronaut-test-junit5"
    testCompile "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testCompile "org.jetbrains.spek:spek-api:${spekVersion}"
    testCompile "ch.tutteli.atrium:atrium-cc-en_GB-robstoll:${atriumVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:${spekVersion}"
}

test {
    systemProperty "java.util.logging.config.file", "${project.rootDir}/config/logging.properties"

    classpath += configurations.developmentOnly

    useJUnitPlatform()

    testLogging {
        showExceptions = true
        showStandardStreams = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run {
    classpath += configurations.developmentOnly
    jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote")
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        javaParameters = true
    }
}

build {
    finalizedBy buildDashboard
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "5.5.1"
}

defaultTasks "build"

static void linkPrePush(project) {
    def link = Paths.get("${project.rootDir}", ".git", "hooks", "pre-push")
    def target = Paths.get("${project.rootDir}", "pre-push")
    if (!Files.exists(link)) createSymbolicLink(link, target)
}
